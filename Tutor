<!-- ========================================= -->
<!-- FILE: index.html (File principale) -->
<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tutor Linguistico Interattivo</title>
    
    <!-- PWA Meta Tags -->
    <link rel="manifest" href="manifest.json">
    <meta name="theme-color" content="#3B82F6">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <meta name="apple-mobile-web-app-title" content="Tutor Linguistico">
    
    <!-- Icons -->
    <link rel="icon" type="image/png" sizes="192x192" href="icons/icon-192.png">
    <link rel="apple-touch-icon" href="icons/icon-192.png">
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- React e Babel -->
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <!-- Lucide Icons -->
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    
    <style>
        body { margin: 0; padding: 0; }
        .line-clamp-2 {
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
    </style>
</head>
<body>
    <div id="root"></div>
    
    <script type="text/babel">
        const { useState, useEffect, useRef } = React;
        const { Send, MessageCircle, Target, TrendingUp, BookOpen, Settings, Star, Award, CheckCircle, AlertCircle } = lucide;

        const LanguageTutor = () => {
          const [selectedLanguage, setSelectedLanguage] = useState('spanish');
          const [currentMessage, setCurrentMessage] = useState('');
          const [messages, setMessages] = useState([]);
          const [isLoading, setIsLoading] = useState(false);
          const [activeTab, setActiveTab] = useState('chat');
          const [userLevel, setUserLevel] = useState('beginner');
          const [mode, setMode] = useState('casual');
          const [sessionStats, setSessionStats] = useState({
            messagesCount: 0,
            vocabUsed: new Set(),
            errorsFound: 0,
            sessionDuration: 0
          });
          const [learningGoals, setLearningGoals] = useState([]);
          const [feedback, setFeedback] = useState([]);
          const [commonErrors, setCommonErrors] = useState({});
          const [progress, setProgress] = useState({
            vocabulary: 65,
            grammar: 45,
            conversation: 70
          });
          const [learningJournal, setLearningJournal] = useState([]);
          
          const messagesEndRef = useRef(null);
          const sessionStartTime = useRef(Date.now());

          const languages = {
            spanish: { name: 'Español', flag: '🇪🇸', greeting: '¡Hola! Soy tu tutor de español. ¿De qué te gustaría hablar hoy?' },
            french: { name: 'Français', flag: '🇫🇷', greeting: 'Bonjour! Je suis votre tuteur de français. De quoi aimeriez-vous parler aujourd\'hui?' },
            german: { name: 'Deutsch', flag: '🇩🇪', greeting: 'Hallo! Ich bin Ihr Deutsch-Tutor. Worüber möchten Sie heute sprechen?' },
            japanese: { name: '日本語', flag: '🇯🇵', greeting: 'こんにちは！日本語のチューターです。今日は何について話したいですか？' },
            english: { name: 'English', flag: '🇺🇸', greeting: 'Hello! I\'m your English tutor. What would you like to talk about today?' },
            italian: { name: 'Italiano', flag: '🇮🇹', greeting: 'Ciao! Sono il tuo tutor di italiano. Di cosa vorresti parlare oggi?' },
            portuguese: { name: 'Português', flag: '🇧🇷', greeting: 'Olá! Sou seu tutor de português. Do que gostaria de falar hoje?' }
          };

          const levelColors = {
            beginner: 'bg-green-100 text-green-800',
            intermediate: 'bg-yellow-100 text-yellow-800',
            advanced: 'bg-red-100 text-red-800'
          };

          useEffect(() => {
            initializeGoals();
            addWelcomeMessage();
          }, [selectedLanguage]);

          useEffect(() => {
            scrollToBottom();
          }, [messages]);

          useEffect(() => {
            const interval = setInterval(() => {
              setSessionStats(prev => ({
                ...prev,
                sessionDuration: Math.floor((Date.now() - sessionStartTime.current) / 1000)
              }));
            }, 1000);
            return () => clearInterval(interval);
          }, []);

          const scrollToBottom = () => {
            messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
          };

          const initializeGoals = () => {
            const defaultGoals = {
              spanish: [
                'Padroneggiare la coniugazione dei verbi irregolari',
                'Espandere il vocabolario relativo al cibo',
                'Migliorare l\'uso di ser vs estar',
                'Praticare le forme di cortesia'
              ],
              french: [
                'Migliorare la pronuncia delle vocali',
                'Padroneggiare gli accordi degli aggettivi',
                'Espandere il vocabolario familiare',
                'Praticare i tempi del passato'
              ],
              german: [
                'Memorizzare gli articoli determinativi',
                'Praticare l\'ordine delle parole',
                'Espandere il vocabolario professionale',
                'Migliorare la declinazione degli aggettivi'
              ],
              japanese: [
                'Memorizzare i kanji di base',
                'Praticare le forme di cortesia',
                'Migliorare la pronuncia',
                'Espandere il vocabolario quotidiano'
              ],
              english: [
                'Migliorare la pronuncia',
                'Espandere il vocabolario accademico',
                'Praticare i phrasal verbs',
                'Perfezionare i tempi verbali'
              ],
              italian: [
                'Padroneggiare i tempi del passato',
                'Migliorare l\'uso delle preposizioni',
                'Espandere il vocabolario culinario',
                'Praticare il congiuntivo'
              ],
              portuguese: [
                'Distinguere ser vs estar',
                'Migliorare la pronuncia nasale',
                'Espandere il vocabolario brasiliano',
                'Praticare i tempi del futuro'
              ]
            };
            setLearningGoals(defaultGoals[selectedLanguage] || []);
          };

          const addWelcomeMessage = () => {
            const welcomeMessage = {
              id: Date.now(),
              type: 'tutor',
              text: languages[selectedLanguage].greeting,
              timestamp: new Date()
            };
            setMessages([welcomeMessage]);
          };

          const analyzeMessage = (text) => {
            const analysis = {
              feedback: [],
              errors: [],
              vocabulary: [],
              level: userLevel
            };

            const words = text.toLowerCase().split(/\s+/);
            analysis.vocabulary = words.filter(word => word.length > 3);

            if (selectedLanguage === 'spanish') {
              if (text.includes('para') && text.includes('por')) {
                analysis.feedback.push('Ottimo uso delle preposizioni "para" e "por"!');
              }
              if (text.match(/\b(soy|es|está|estoy)\b/)) {
                analysis.feedback.push('Bene! Stai usando correttamente i verbi ser/estar.');
              }
              if (!text.match(/[¿¡]/)) {
                analysis.errors.push('Ricorda di usare i segni di punteggiatura spagnoli (¿¡)');
              }
            } else if (selectedLanguage === 'french') {
              if (text.includes('je suis') || text.includes('tu es')) {
                analysis.feedback.push('Excellente conjugaison du verbe être!');
              }
              if (text.match(/\b(le|la|les)\b/)) {
                analysis.feedback.push('Bon usage des articles définis!');
              }
            }

            if (words.length > 15 && analysis.vocabulary.length > 8) {
              analysis.level = 'advanced';
            } else if (words.length > 8 && analysis.vocabulary.length > 4) {
              analysis.level = 'intermediate';
            }

            return analysis;
          };

          const generateTutorResponse = async (userMessage) => {
            const responses = {
              spanish: [
                '¡Muy bien! Me gusta cómo te expresas. ¿Puedes contarme más sobre eso?',
                'Interesante. En español también podríamos decir... ¿Conoces otras formas de expresar esto?',
                '¡Excelente! Tu español está mejorando. ¿Qué otros temas te interesan?'
              ],
              french: [
                'C\'est très bien! J\'aime votre façon de vous exprimer. Pouvez-vous m\'en dire plus?',
                'Intéressant. En français, nous pourrions aussi dire... Connaissez-vous d\'autres façons d\'exprimer cela?',
                'Excellent! Votre français s\'améliore. Quels autres sujets vous intéressent?'
              ],
              german: [
                'Das ist sehr gut! Mir gefällt, wie Sie sich ausdrücken. Können Sie mir mehr darüber erzählen?',
                'Interessant. Auf Deutsch könnten wir auch sagen... Kennen Sie andere Arten, das auszudrücken?',
                'Ausgezeichnet! Ihr Deutsch wird besser. Welche anderen Themen interessieren Sie?'
              ],
              japanese: [
                'とても良いですね！あなたの表現が好きです。もっと教えてくれませんか？',
                '面白いですね。日本語では他にも言い方があります...他の表現を知っていますか？',
                '素晴らしい！日本語が上達していますね。他にどんな話題に興味がありますか？'
              ],
              english: [
                'That\'s very good! I like how you express yourself. Can you tell me more about that?',
                'Interesting. In English we could also say... Do you know other ways to express this?',
                'Excellent! Your English is improving. What other topics interest you?'
              ],
              italian: [
                'Molto bene! Mi piace come ti esprimi. Puoi dirmi di più?',
                'Interessante. In italiano potremmo anche dire... Conosci altri modi per esprimere questo?',
                'Eccellente! Il tuo italiano sta migliorando. Che altri argomenti ti interessano?'
              ],
              portuguese: [
                'Muito bom! Gosto de como você se expressa. Pode me falar mais sobre isso?',
                'Interessante. Em português também poderíamos dizer... Você conhece outras formas de expressar isso?',
                'Excelente! Seu português está melhorando. Que outros assuntos te interessam?'
              ]
            };

            const langResponses = responses[selectedLanguage] || responses.english;
            return langResponses[Math.floor(Math.random() * langResponses.length)];
          };

          const handleSendMessage = async () => {
            if (!currentMessage.trim()) return;

            const userMessage = {
              id: Date.now(),
              type: 'user',
              text: currentMessage,
              timestamp: new Date()
            };

            setMessages(prev => [...prev, userMessage]);
            setCurrentMessage('');
            setIsLoading(true);

            const analysis = analyzeMessage(currentMessage);
            
            setSessionStats(prev => ({
              messagesCount: prev.messagesCount + 1,
              vocabUsed: new Set([...prev.vocabUsed, ...analysis.vocabulary]),
              errorsFound: prev.errorsFound + analysis.errors.length,
              sessionDuration: prev.sessionDuration
            }));

            if (analysis.feedback.length > 0 || analysis.errors.length > 0) {
              setFeedback(prev => [...prev.slice(-4), {
                id: Date.now(),
                message: currentMessage,
                feedback: analysis.feedback,
                errors: analysis.errors,
                timestamp: new Date()
              }]);
            }

            if (analysis.level !== userLevel) {
              setUserLevel(analysis.level);
            }

            try {
              const tutorResponse = await generateTutorResponse(currentMessage);
              
              setTimeout(() => {
                const tutorMessage = {
                  id: Date.now() + 1,
                  type: 'tutor',
                  text: tutorResponse,
                  timestamp: new Date()
                };
                setMessages(prev => [...prev, tutorMessage]);
                setIsLoading(false);
              }, 1500);
            } catch (error) {
              console.error('Error generating response:', error);
              setIsLoading(false);
            }
          };

          const formatTime = (seconds) => {
            const mins = Math.floor(seconds / 60);
            const secs = seconds % 60;
            return `${mins}:${secs.toString().padStart(2, '0')}`;
          };

          const addCustomGoal = () => {
            const goal = prompt('Inserisci un nuovo obiettivo di apprendimento:');
            if (goal && goal.trim()) {
              setLearningGoals(prev => [...prev, goal.trim()]);
            }
          };

          const removeGoal = (index) => {
            setLearningGoals(prev => prev.filter((_, i) => i !== index));
          };

          return (
            <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 overflow-x-hidden">
              <div className="container mx-auto p-2 sm:p-4 max-w-7xl">
                {/* Header */}
                <div className="bg-white rounded-xl shadow-lg p-3 sm:p-6 mb-4 sm:mb-6">
                  <div className="flex flex-col gap-3 sm:gap-4">
                    <div className="flex items-center gap-3 sm:gap-4">
                      <div className="text-2xl sm:text-3xl">{languages[selectedLanguage].flag}</div>
                      <div className="flex-1 min-w-0">
                        <h1 className="text-lg sm:text-2xl font-bold text-gray-800 truncate">Tutor Linguistico</h1>
                        <p className="text-sm sm:text-base text-gray-600 truncate">Migliora {languages[selectedLanguage].name}</p>
                      </div>
                    </div>
                    
                    <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-4">
                      <select 
                        value={selectedLanguage}
                        onChange={(e) => setSelectedLanguage(e.target.value)}
                        className="px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        {Object.entries(languages).map(([code, lang]) => (
                          <option key={code} value={code}>
                            {lang.flag} {lang.name}
                          </option>
                        ))}
                      </select>
                      
                      <div className="flex items-center justify-between sm:justify-start gap-2 sm:gap-4">
                        <div className="flex items-center gap-2">
                          <span className="text-xs sm:text-sm text-gray-500">Livello:</span>
                          <span className={`px-2 py-1 rounded-full text-xs font-semibold ${levelColors[userLevel]}`}>
                            {userLevel.toUpperCase()}
                          </span>
                        </div>
                        
                        <button
                          onClick={() => setMode(mode === 'casual' ? 'structured' : 'casual')}
                          className={`px-3 py-1 rounded-lg text-xs font-medium transition-colors ${
                            mode === 'casual' 
                              ? 'bg-blue-100 text-blue-700' 
                              : 'bg-purple-100 text-purple-700'
                          }`}
                        >
                          {mode === 'casual' ? 'Informale' : 'Strutturata'}
                        </button>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-4 gap-3 sm:gap-6">
                  {/* Chat Area */}
                  <div className="lg:col-span-2 order-1">
                    <div className="bg-white rounded-xl shadow-lg h-[500px] sm:h-[600px] flex flex-col">
                      <div className="p-3 sm:p-4 border-b border-gray-200">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <MessageCircle className="w-4 h-4 sm:w-5 sm:h-5 text-blue-500" />
                            <span className="text-sm sm:text-base font-semibold text-gray-800">Chat</span>
                          </div>
                          <div className="text-xs sm:text-sm text-gray-500">
                            {formatTime(sessionStats.sessionDuration)}
                          </div>
                        </div>
